"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[306],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),f=o,d=c["".concat(p,".").concat(f)]||c[f]||u[f]||a;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9354:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:3},p="Transformer",s={unversionedId:"transformer",id:"transformer",title:"Transformer",description:"Parameters",source:"@site/docs/transformer.md",sourceDirName:".",slug:"/transformer",permalink:"/transformer",editUrl:"https://github.com/Josh-McFarlin/js-image-lib/tree/master/docs/templates/shared/docs/transformer.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/tutorial/congratulations"}},m=[{value:"Parameters",id:"parameters",children:[],level:2},{value:"Transform Options",id:"transform-options",children:[],level:2},{value:"Other Types",id:"other-types",children:[],level:2}],u={toc:m};function c(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"transformer"},"Transformer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import { imageTransformer } from "js-image-lib";\n\nconst image: Uint8Array = ...;\nconst transformOptions = {\n  width: 100,\n};\n\nconst newImage = imageTransformer({\n  data: image\n}, transformOptions);\n')),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"input"),(0,a.kt)("td",{parentName:"tr",align:"center"},"{ data: Uint8Array, contentType?: MimeType }"),(0,a.kt)("td",{parentName:"tr",align:"center"},"X"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"The source of the image to transform. The parameter ",(0,a.kt)("inlineCode",{parentName:"td"},"contentType")," is optional, but should be provided if it is known to speed up performance.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"options"),(0,a.kt)("td",{parentName:"tr",align:"center"},"TransformOptions"),(0,a.kt)("td",{parentName:"tr",align:"center"},"X"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"The options to use to transform the image.")))),(0,a.kt)("h2",{id:"transform-options"},"Transform Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface TransformOptions {\n  /** Width of resulting image. */\n  width: number;\n  /** Height of resulting image. If width is present, this take priority. */\n  height?: number;\n  /** The content type of the resulting image. (optional, default source type) */\n  contentType?: MimeType;\n  /** How the image should be resized to fit both provided dimensions. (optional, default 'contain') */\n  fit?: ImageFit;\n  /** Position to use when fit is cover or contain. (optional, default 'center') */\n  position?: ImagePosition;\n  /** Background color of resulting image. (optional, default [0x00, 0x00, 0x00, 0x00]) */\n  background?: Color;\n  /** Quality, integer 1-100. (optional, default 80) */\n  quality?: number;\n  /** zlib compression level, 0-9. (optional, default 9) */\n  compressionLevel?: number;\n  /** Number of animation iterations, use 0 for infinite animation. (optional, default 0) */\n  loop?: number;\n  /** Delay between animation frames (in milliseconds). (optional, default 100) */\n  delay?: number;\n  /** The number of pixels to blur the image by. (optional, default null) */\n  blurRadius?: number | null;\n  /** The number of degrees to rotate the image by. (optional, default null) */\n  rotate?: number | null;\n  /** The direction to mirror the image by. (optional, default null) */\n  flip?: FlipDirection | null;\n  /** The location to crop the source image before any other operations are applied. (optional, default null) */\n  crop?: CropOptions | null;\n}\n")),(0,a.kt)("h2",{id:"other-types"},"Other Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export enum ImageFit {\n  CONTAIN = "contain",\n  COVER = "cover",\n  FILL = "fill",\n  INSIDE = "inside",\n  OUTSIDE = "outside",\n}\n\nexport enum ImagePosition {\n  LEFT = "left",\n  CENTER = "center",\n  RIGHT = "right",\n}\n\nexport enum FlipDirection {\n  HORIZONTAL = "horizontal",\n  VERTICAL = "vertical",\n  BOTH = "both",\n}\n\nexport interface CropOptions {\n  /** The x position of the upper left pixel. */\n  x: number;\n  /** The y position of the upper left pixel. */\n  y: number;\n  /** The number of pixels wide to crop the image. */\n  width: number;\n  /** The number of pixels high to crop the image. */\n  height: number;\n}\n')))}c.isMDXComponent=!0}}]);