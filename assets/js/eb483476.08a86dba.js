"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[306],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},m),{},{components:n})):r.createElement(g,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9354:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={sidebar_position:3},s="Transformer",l={unversionedId:"transformer",id:"transformer",title:"Transformer",description:"If you know the content type of your image, you can pass it into the constructor to speed up initialization.",source:"@site/docs/transformer.md",sourceDirName:".",slug:"/transformer",permalink:"/transformer",editUrl:"https://github.com/Josh-McFarlin/js-image-lib/tree/master/docs/templates/shared/docs/transformer.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/tutorial/congratulations"}},m=[{value:"Parameters",id:"parameters",children:[{value:"Default Output Options",id:"default-output-options",children:[],level:3}],level:2},{value:"Class Methods",id:"class-methods",children:[{value:"Crop",id:"crop",children:[],level:3},{value:"Resize",id:"resize",children:[],level:3},{value:"Flip",id:"flip",children:[],level:3},{value:"Rotate",id:"rotate",children:[],level:3},{value:"Blur",id:"blur",children:[],level:3},{value:"ToBuffer",id:"tobuffer",children:[],level:3}],level:2},{value:"Other Types",id:"other-types",children:[],level:2}],c={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transformer"},"Transformer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import ImageTransformer, { OutputOptions } from "js-image-lib";\n\nconst image: Uint8Array = ...;\nconst outputOptions: Partial<OutputOptions> = {}; // optional\n\nconst transformer = new ImageTransformer(image, outputOptions);\n')),(0,i.kt)("p",null,"If you know the content type of your image, you can pass it into the constructor to speed up initialization."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import ImageTransformer, { MimeType, OutputOptions } from "js-image-lib";\n\nconst image: Uint8Array = ...;\nconst contentType: MimeType = ...;\nconst outputOptions: Partial<OutputOptions> = {}; // optional\n\nconst transformer = new ImageTransformer(image, contentType, outputOptions);\n')),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"image"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Uint8Array"),(0,i.kt)("td",{parentName:"tr",align:"center"},"X"),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"},"The source of the image to transform.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"contentType"),(0,i.kt)("td",{parentName:"tr",align:"center"},"MimeType"),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"},"optional, but should be provided if it is known to speed up performance.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"outputOptions"),(0,i.kt)("td",{parentName:"tr",align:"center"},"OutputOptions"),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"},"See Below"),(0,i.kt)("td",{parentName:"tr",align:"center"},"The options to use to transform the image.")))),(0,i.kt)("h3",{id:"default-output-options"},"Default Output Options"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"background"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Color"),(0,i.kt)("td",{parentName:"tr",align:"center"},"[0x00, 0x00, 0x00, 0x00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Background color of resulting image.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"quality"),(0,i.kt)("td",{parentName:"tr",align:"center"},"number"),(0,i.kt)("td",{parentName:"tr",align:"center"},"80"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Quality, integer 1-100.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"compressionLevel"),(0,i.kt)("td",{parentName:"tr",align:"center"},"number"),(0,i.kt)("td",{parentName:"tr",align:"center"},"9"),(0,i.kt)("td",{parentName:"tr",align:"center"},"zlib compression level, 0-9.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"loop"),(0,i.kt)("td",{parentName:"tr",align:"center"},"number"),(0,i.kt)("td",{parentName:"tr",align:"center"},"0"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Number of animation iterations, use 0 for infinite animation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"delay"),(0,i.kt)("td",{parentName:"tr",align:"center"},"number"),(0,i.kt)("td",{parentName:"tr",align:"center"},"100"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Delay between animation frames (in milliseconds).")))),(0,i.kt)("h2",{id:"class-methods"},"Class Methods"),(0,i.kt)("h3",{id:"crop"},"Crop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Crop the image.\n * @param x The x position of the upper left pixel.\n * @param y The y position of the upper left pixel.\n * @param width The number of pixels wide to crop the image.\n * @param height The number of pixels high to crop the image.\n */\ncrop(x: number, y: number, width: number, height: number)\n")),(0,i.kt)("h3",{id:"resize"},"Resize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Resize the image.\n * @param width Width of resulting image or null.\n * @param height Height of resulting image or null. If width is present, this takes priority.\n * @param options Optional settings used to adjust the fit and placement of the image within its frame.\n * @param options.fit How the image should be resized to fit both provided dimensions. (optional, default 'cover')\n * @param options.position Position to use when fit is cover or contain. (optional, default 'center')\n */\nresize(width: number, options?: ResizeOptions)\nresize(width: null, height: number, options?: ResizeOptions)\nresize(width: number, height: number, options?: ResizeOptions)\n")),(0,i.kt)("h3",{id:"flip"},"Flip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Flip the image across its axis.\n * @param direction The direction to mirror the image by.\n */\nflip(direction: FlipDirection)\n")),(0,i.kt)("h3",{id:"rotate"},"Rotate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Rotate the image by a number of degrees clockwise.\n * @param degrees The number of degrees to rotate the image by.\n */\nrotate(degrees: number)\n")),(0,i.kt)("h3",{id:"blur"},"Blur"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Blur the image using gaussian blur with a specified radius.\n * @param blurRadius The number of pixels to blur the image by.\n */\nblur(blurRadius: number)\n")),(0,i.kt)("h3",{id:"tobuffer"},"ToBuffer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Export the image as a Uint8Array with an optionally specified mime type.\n * @param contentType The content type of the resulting image. (optional, default source type)\n */\ntoBuffer(contentType?: MimeType)\n")),(0,i.kt)("h2",{id:"other-types"},"Other Types"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'export type ImageFit =\n  /** Preserving aspect ratio, contain image within both provided dimensions using a border where necessary. */\n  | "contain"\n  /** Preserving aspect ratio, ensure the image covers both provided dimensions by cropping it to fit. */\n  | "cover"\n  /** Ignore the aspect ratio of the input and stretch to both provided dimensions. */\n  | "fill"\n  /** Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified. */\n  | "inside"\n  /** Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. */\n  | "outside";\n\nexport type ImagePositionHorizontal = "left" | "center" | "right";\nexport type ImagePositionVertical = "top" | "center" | "bottom";\nexport type ImagePosition =\n  | ImagePositionHorizontal\n  | ImagePositionVertical\n  | `${ImagePositionHorizontal} ${ImagePositionVertical}`;\n\nexport type FlipDirection = "horizontal" | "vertical" | "both";\n\nexport interface ResizeOptions {\n  /** How the image should be resized to fit both provided dimensions. */\n  fit?: ImageFit;\n  /** Position to use when fit is cover or contain. */\n  position?: ImagePosition;\n}\n')))}u.isMDXComponent=!0}}]);