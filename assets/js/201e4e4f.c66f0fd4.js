"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[218],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=u(t),m=o,d=f["".concat(l,".").concat(m)]||f[m]||c[m]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9099:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return f}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:2},l="Use Transformer",u={unversionedId:"tutorial/use-transformer",id:"tutorial/use-transformer",title:"Use Transformer",description:"To use the image transformer, you must first get your image encoded as an Uint8Array.",source:"@site/docs/tutorial/use-transformer.md",sourceDirName:"tutorial",slug:"/tutorial/use-transformer",permalink:"/tutorial/use-transformer",editUrl:"https://github.com/Josh-McFarlin/js-image-lib/tree/master/docs/templates/shared/docs/tutorial/use-transformer.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/tutorial/install"},next:{title:"Congratulations!",permalink:"/tutorial/congratulations"}},p=[{value:"Fetch",id:"fetch",children:[],level:3},{value:"File",id:"file",children:[],level:3},{value:"Transform",id:"transform",children:[],level:2},{value:"Transform Options",id:"transform-options",children:[],level:2}],c={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-transformer"},"Use Transformer"),(0,a.kt)("p",null,"To use the image transformer, you must first get your image encoded as an Uint8Array.\nThis can be accomplished various ways, such as:"),(0,a.kt)("h3",{id:"fetch"},"Fetch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const fetchResolver = async (url) => {\n  const imageResponse = await fetch(url, {\n    headers: {\n      accept: "image/*",\n    },\n  });\n  const arrBuff = await imageResponse.arrayBuffer();\n\n  const buffer = new Uint8Array(arrBuff);\n  const contentType = imageResponse.headers.get("content-type");\n\n  return {\n    buffer,\n    contentType,\n  };\n};\n')),(0,a.kt)("h3",{id:"file"},"File"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import fs from "fs";\nimport path from "path";\nimport { mimeFromBuffer } from "js-image-lib";\n\nconst fsResolver = async (filePath) => {\n  const buffer = fs.readFileSync(filePath);\n  const contentType = mimeFromBuffer(buffer);\n\n  return {\n    buffer: new Uint8Array(buffer),\n    contentType,\n  };\n};\n')),(0,a.kt)("h2",{id:"transform"},"Transform"),(0,a.kt)("p",null,"Once, you have your image as a Uint8Array, transform it with ",(0,a.kt)("inlineCode",{parentName:"p"},"imageTransformer")," by providing the image and the options to use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import { imageTransformer, MimeType } from "js-image-lib";\n\nconst image: Uint8Array = ...;\nconst contentType: MimeType = ...;\nconst transformOptions = {\n  width: 100,\n};\n\nconst newImage = imageTransformer({\n  data: image,\n  contentType\n}, transformOptions);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": The parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"contentType")," is optional, but should be provided if it is known to speed up performance."),(0,a.kt)("h2",{id:"transform-options"},"Transform Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface TransformOptions {\n  /** Width of resulting image. */\n  width: number;\n  /** Height of resulting image. If width is present, this take priority. */\n  height?: number;\n  /** The content type of the resulting image. (optional, default source type) */\n  contentType?: MimeType;\n  /** How the image should be resized to fit both provided dimensions. (optional, default 'contain') */\n  fit?: ImageFit;\n  /** Position to use when fit is cover or contain. (optional, default 'center') */\n  position?: ImagePosition;\n  /** Background color of resulting image. (optional, default [0x00, 0x00, 0x00, 0x00]) */\n  background?: Color;\n  /** Quality, integer 1-100. (optional, default 80) */\n  quality?: number;\n  /** zlib compression level, 0-9. (optional, default 9) */\n  compressionLevel?: number;\n  /** Number of animation iterations, use 0 for infinite animation. (optional, default 0) */\n  loop?: number;\n  /** Delay between animation frames (in milliseconds). (optional, default 100) */\n  delay?: number;\n  /** The number of pixels to blur the image by. (optional, default null) */\n  blurRadius?: number | null;\n  /** The number of degrees to rotate the image by. (optional, default null) */\n  rotate?: number | null;\n  /** The direction to mirror the image by. (optional, default null) */\n  flip?: FlipDirection | null;\n  /** The location to crop the source image before any other operations are applied. (optional, default null) */\n  crop?: CropOptions | null;\n}\n")))}f.isMDXComponent=!0}}]);